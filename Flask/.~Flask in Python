PYTHON FLASK:

FLASK is a web application framework written in Python.

WHAT IS A WEB FRAMEWORK?

A web frame work is an application framework as well and basically contains collection of libraries and modules that enable a web developers to write application without having to bother about any low level details like protocol and thread management details.

ADVANTAGE: Flask is really intuitive and easy to use.

FLASK is based on:-
1. Werkzeug WSGI(Web Server Gateway Interface) Toolkit.
2. Jinga2 Template Engine.

FLASK is oftern referred to as a MICRO FRAMEWORK.
It aims at keeping the core of an application simple and yet very extensible.
Flask does not have any inbuild abstraction layer for data handling nor does it have any validation control.

FIRST CODE:

from flask import Flask  <- Importing the flask module in the project. An object of flask class is our WSGI application. Importing flask module in the project is mandatory.

app = Flask(__name__)  <- Next we create an instance of this class. The first argument is the name of the application’s module or package. Flask constructor takes name of current module (__name__) as argument.

@app.route('/')   <- We then use the route() decorator to tell Flask what URL should trigger our function.  '/' is the URL bound with the hello world function.

def hello_world():
    return 'Hello, World!'    <- The function is given a name which is also used to generate URLs for that particular function, and returns the message we want to display in the user’s browser.

if __name__ == '__main__':
 app.run()     <- run method of the flask class runs that application on the local particular developmentserver.
    
 ROUTE fUNCTION:
It is basically a decorator. It tells the application which URL should be associated with that particular function.

route() function
App.route(rule, options)

rule: URL binding with the function.
options: List of parameters to be forwarded to the underlying Rule object.

RUN METHOD:

App.run(host, port, options)

the 3 pararmeterts:

Host: is the name of the host (local host)
Port is the default port 5000
Options:  Options that neeed to be forwarded to the Werkzeug server.
Debug: Default to FALSE, If set to TRUE, provides a  debug information.

FLASK APPLICATION:

FLASK Application is started by calling the Run method.

Debug mode is also called Debug support: Server will re-load itself for ay of the code change. so we do not have to manully do it. It also provides a basic useful debugger to track all the error if we have any.

app.debug = True
app.run()
app.run(debug = True)


FLASK ROUTING:
Route() decorator in FLASK is used to bind URL to a function.
It is used to help users to remember the application URL better.

example:-
         @app.route('/hello')   <- URL is /hello and it is boud to the function.
         def hello_world():
              return 'hello world'


example:-
          def hello_world():
              return 'hello world'
          app.add_url_rule('/', 'hello', hello_world)


VARIABLE RULES:

It is possble to build a URL dynamically. IT can be done by addind variable parts to the rule parameter.

example:-
          from flask import Flask
          app = Flask(__name__)
          @app.route('/hello/<name>')
          def hello_name(name):
             return 'Hello %s!' %name
          if __name__ = '__main__':
              app.run(debug = True)
              
HTTP://LOCALHOST:5000/HELLO/EDUREKA

example 2:-
          from flask import Flask
          app = Flask(__name__)
          @app.route('/blog/<int:postID>')
          def show_blog(postID):
             return 'BlogNumber %d' %postID
             
          @app.route('/rev/<float:revNo>')
          def revision(revNo):
             return 'Revision Number %f' %revNo
             
             
          if __name__ = '__main__':
              app.run(debug = True)
         

Consider the following:

        /python =  /python//
      BUT:
        /flask =!  /flask/
        
example:-
          from flask import Flask
          app = Flask(__name__)
          
          @app.route('/flask')
          def hello_flask():
             return 'Hello Flask'
             
          @app.route('/python/')
          def hello_python():
             return 'Helo Python'
          if __name__ ='__main__':
              app.run()
              
              
URL BINDING:

url_for() function is used for dynamically building a URL for a specific function.
The function accpets the name of the function as the first argument and one or more keywords for other arguments.

example:-
          from flask import Flask, redirect, url_for
          app = Flask(__name__)
          
          @app.route('/admin')
          def hello_admin():
             return 'Hello Aadmin'
             
          @app.route('/guest/<guest>')
          def hello_guest(guest):
             return 'Helo %s as Guest' % guest
             
          @app.route('/user/<name>')
          def hello_user(name):
               if name == 'admin'
                   return redirect(url_for('Hello Admin'))
               else:
                   return 
           redirect(url_for('Hello, guest', guest=name))
             
             
          if __name__ ='__main__':
              app.run(debug = True)
             
             
FLASK - HTTP METHODS

HTTP Protocols are the foundation for the data communication in WWW.
There are diff methods of data retrival from any given URL which are defind in the URL.

DIFFERENT TYPES OF HTTP METHODS.

1. GET:-  Sends data in unencrypted form to the server.
2. HEAD:- Same as GET, but without respense body.
3. POST:- Used to send HTML form data to server.
4. PUT:- Replaces all current representations of target resources with uploaded content.
5. DELETE:- Removes all current representations of target resource given by URL.

CREATE AN HTML FORM!

<html>
    <body>
            
            <form action = "http://localhost:5000/login" method = "post">
                <p>Enter Name:</p>
                <p><input type = "text" name = "nm" /></p>
                <p><input type = "submit" value= "submit" /> </p>
                </form>
      </body>
   </html>
   
 PYTHON SCRIPT
 
          from flask import Flask, redirect, url_for
          app = Flask(__name__)
                     
          @app.route('/success/<name>')
          def success(name):
             return 'welcome %s % name
             
          @app.route('/login',methods=['POST', 'GET'])
          def login(name):
               if request.method == 'POST'
                   user = request.form['nm']
                   return redirect(url_for('success', name=user))
               else:
                   user= request.args.get('nm') 
                   return redirect(url_for(success', name=user))
             
             
          if __name__ ='__main__':
              app.run(debug = True) 



FLASK ---  TEMPLATES

Can we return the output of a function bound to a URL in the HTML Form?
YES, FLASK will try to find th HTML file in the templates folder, in the same folder in which this script is present.

exaple:-
        from flask import Flask
          app = Flask(__name__)
          @app.route('/')
          def index():
             return '<html><body><h1>'Hello World'</h1></body></html>'
          if __name__ = '__main__':
              app.run(debug = True)
              

WEB TEMPLATING:
It refers to designing an HTML script in which the variable data can be inserted dynamically.
It consist of an actual template engine and some kind of data source and template processor.
Since flask uses a Jinga 2 template engine, a web template actually contains a html  syntax which consist of a placeholder for the variables and expressions.

example:-
           <!doctype html>
           <html>
             <body>
                 <h1>Hello {{name}}!</h1>
             </body>
           </html>
           
from flask import Flask
app = Flask(__name__)

@app.route('/hello/<user>')
def hello_name(user):
    return render_template('hello.html',name=user)
    
if __name__ = '__main__':
              app.run(debug = True)
              
              
Jinga2 template engine uses the following delimiters for esaping:

1. (%....%) ----> for statements
2. ({....}) ----> for expressions to print to the template output
3. (#....#) ----> for comments not included in the template output
4. (#....##) ----> for Line Statements

Conditional statements in template:

          from flask import Flask
          app = Flask(__name__)
          @app.route('/hello/<int:score>')
          def hello_name(score):
             return render_template('hello.html', marks=score)
          if __name__ = '__main__':
              app.run(debug = True)

<!doctype html>
<html>
  <body>
      
      {% if marks > 50%}
      <h1>Your Result is PASS! </h1>
      {% else %}
      <h1>Your Result is FAIL! </h1>
      {% endif %}
   </body>
 </html>

example2:- 
          from flask import Flask
          app = Flask(__name__)
          @app.result('')
          def result():
             dict = {'phy':50, 'che':60, 'maths':70}
             return render_template('result.html', result=dict)
             
             
          if __name__ = '__main__':
              app.run(debug = True)
              
<!doctype html>
<html>
  <body>
     
     <table border = 1>
      {% for key, value in result.iteritems() %}
      
        <tr>
          <th> {{ key }} </th>
          <td>{{ value }}</td>
         </tr>
      
      {% endfor %}
      </table>
   </body>
 </html>


FLASK: STATIC FILES

A static file can be anything a JS file or a CSS file used to support the displaying of a web page.

example:- 
          from flask import Flask
          app = Flask(__name__)
          @app.route('/result')
          def result():
             dict = {'phy':50, 'che':60, 'maths':70}
             return render_template('result.html', result=dict)
             
             
          if __name__ = '__main__':
              app.run(debug = True)
              
<!doctype html>
<html>
  <body>
     
     <table border = 1>
      {% for key, value in result.iteritems() %}
      
        <tr>
          <th> {{ key }} </th>
          <td>{{ value }}</td>
         </tr>
      
      {% endfor %}
      </table>
   </body>
 </html>

function sayHello()
    {
      alert("Hello World")
    }

FLASK REQUEST OBJECT
Data from client's webpage is sent to server as a global request object

ATTRIBUTE OF REQUEST OBJECT (26:56)
1. FORM:- Dictionary object containing key-vaue pairs of form paramets and values.
2. args:- Parsed contents of query string which is part of URL after question mark(?).
3. Cookies:- Dictinary object holding Cookie names and values.
4. Files:-  Data pertaining to uploaded file.
5. Methods:- Current request method.

COOKIES:  It is stored on client's machine in the form of a text file. And helps with data tracking, pertaining to the clients usgade for better experince and site analysis as well.

A Request object conatins a cookie attribute
A dictionary objevt of all the cookie variabkle and their corresponding value that the cliet is transmiting.
Also a cookie stores it expiry time patha nd domain name of site as well.

In Flask Cookie is set on response object

make_response()   <----


@app.route('/')
def index():
        return render_template('index.html')
        

@app.route('/setcookie', methods=['POST' , 'GET'])
def setcookie():
    if request.method == 'POST'
    user= request.form['nm']
 resp= make_response(render_template('readcookie.html'))
 resp.set_cookie('userID',user)
 
 return.resp
 

<html>
<body>

    <form action = "/setcookie" methods= "POST">
    <p><h3>Enter UserID </h3></p>
    <p><input type= 'text' name='nm'/></p>
    <p><input type= 'submit' value='Login'/></p>
    </form>
</body>
</html>

@app.route('/getcookie')
def getcookie():
        name= request.cookies.get('userID')
        return '<h1> Welcome' +name+'</h1>'


FLASK -- REDIRECT and ERROR

Flask Class has a redirect() function which returns a response object.

Prototype --->  Flask.redirect(location, statuscode, response)
                                |           |            |
                                |           |            |
                                |           |            |
                                v           |            |
URL where response should be redirected.    |            |
                                            |            |
                                            |            |
                                            V            |
             Statuscode sent to browser's header         |
                                                         V
                  Response parameter used to instantiate response

Standadized Status Code:


    Prototype ----->  Flask.abort(code)
    
    
STATUS CODE:-

1. HTTP_300_mULTIPLE_CHOICES
2. HTTP_301_MOVED_PERMANENTLY
3. HTTP_302_FOUND
4. HTTP_303_SEE_OTHER
5. HTTP_304_NOT_MODIFIED
6. HTTP_305_USE_PROXY
7. HTTP_306_RESERVED
  
  
CODE      DESCRIPTION
400  ||   Bad Request
401  ||   Unauthenticated
403  ||   Forbidden
404  ||   Not Found
406  ||   Not Acceptable
415  ||   Unsupported Media Type
429  ||   Too Many Requests

FLASK EXTENSION:
It gives the extra entionablity to the praruibular flask framework.
Basically it is nothing but a python module which adds a particular type of support to the flask application.

Extension registry is actually a directory of all the extension available.
required extesion can be downloaded by pip..

4 main exteniosn are:-

            Large number of Extension. 4 main exteniosn
                                    ||
                                    ||
========================================================================================
|                          |                              |                             |
|                          |                              |                             |
|                          |                              |                             |
|                          |                              |                             |
V                          V                              V                             V
FLASK Mail:-             FLASK WTF:-               FLASK SQLAlchemy:-              FLASKSijax:-
Provides SMTP          Adds rendering and          Adds SQLALCHEMY          Instance for SiJax- Python/jQuery
interface to Flask     validation of WTFORMS        support to FLASK         library that makes Ajax easy to use.
application.               |                        application.                        |                     
|                          |                              |                             |
|                          |                              |                             |
|                          |                              |                             |
|                          |                              |                             |
=========================================================================================
                                            ||
                                            ||
                                            ||
                                            
                                         Extensive Documentation
